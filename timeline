#!/usr/bin/env perl -w
# Normalizes timestamp and provides a duration interval.
#
# Takes a file format <timestamp> <TAB> <description>
#
# Author: Rob Fielding <fieldingrp@gmail.com>
#
use strict;

use Date::Parse;
use POSIX;

die ('usage: $0 <deploy.txt>') unless @ARGV ;

# Return tuple of hours and minutes taken.
sub duration {
    my ($minutes) = @_ ;

    my $d_m = $minutes;
    my $d_h = int($d_m / 60);
    $d_m = $d_m - ($d_h*60);

    return ($d_h, $d_m);
}

#########################################################################
#                                                                       #
#  Main                                                                 #
#                                                                       #
#########################################################################
my $start = 0;
my $last  = 0;

while (my $line = <>) {
    chomp($line);

    # Split line on TAB, parse timestamp.
    my ($t, $desc) = split(/\t/, $line);
    my $ts = str2time($t);

    # Sets final start time, if unset.
    $start = $ts if $start == 0;
    # Sets initial last time, if unset. Will update by end of this loop.
    $last = $ts if $last == 0;

    # Compute visual duration indicators.
    my ($s_h, $s_m) = duration(($ts - $start) / 60);
    my ($d_h, $d_m) = duration(($ts - $last) / 60);

    printf("%s\t%ds\t%dh%dm\t%dh%dm\t%s\n",
           POSIX::strftime("%F %T %z %Z", localtime($ts)),
           ($ts - $start),
           $s_h,$s_m,
           $d_h,$d_m,
           $desc
        );
    # Update the last time tracker.
    $last = $ts;
}
